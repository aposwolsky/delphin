<exp : type>
<app : exp -> exp -> exp>
<lam : (exp -> exp) -> exp>

<cp : exp -> exp -> type>
<cp_app : cp E1 F1 -> cp E2 F2 -> cp (app E1 E2) (app F1 F2)>
<cp_lam : ({x:exp} cp x x -> cp (E x) (F x)) -> cp (lam E) (lam F)>


sig cpParams = <x:exp, u: cp x x> ;

cpfun <e:exp> : <cp e e>
   case e : <cp e e> of
      {E1:exp} {E2:exp} <app E1 E2> => 
         let D1 = cpfun E1 in
         let D2 = cpfun E2 in
         <cp_app D1 D2>

     | {E':<exp -> exp>} <lam E'> => 
          next(
            {b : cpParams}  
	    let D = cpfun (E' (b.x)) in
	     case D : []<cp (lam E') (lam E')>
	      of {D' : []<{x:exp} cp x x -> cp (E x) (F x)>} (D' x u) =>  
                prev <cp_lam D'>
            )

     | {{B:cpParams}} <B.x> => <B.u> ;