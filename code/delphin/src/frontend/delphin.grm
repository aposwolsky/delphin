(* Grammar for Delphin *)
(* Author:  Adam Poswolsky *)
structure D = DelphinExtSyntax

fun deReg (_, x) = x
fun getReg (r, _) = r
val join = Paths.join

%%

%name Delphin
%pos int
%header (functor DelphinLrValsFun (structure Token : TOKEN))

%eop EOF
%noshift EOF
%verbose


%term    ID of Paths.region * string 
       | UNDERSCORE of Paths.region
       | STAR  of Paths.region
       | COMMA of Paths.region
       | DOT of Paths.region
       | POUND of Paths.region
       | RTARROW  of Paths.region 
       | EQARROW  of Paths.region 
       | LTARROW of Paths.region 
       | EQUAL of Paths.region 
       | BAR of Paths.region
       | BACKSLASH of Paths.region
       | AND of Paths.region (* for mutual recursion *)
       | PARAMS of Paths.region (* for world declaration *)
       | WITH of Paths.region (* for automatic function extensions *)
       | TYPE of Paths.region 
       | FUN of Paths.region
       | UNIT of Paths.region
       | CASE of Paths.region
       | OF of Paths.region
       | POP of Paths.region
       | LET of Paths.region
       | END of Paths.region
       | VAL of Paths.region
       | IN of Paths.region
       | FN of Paths.region
       | SEMICOLON of Paths.region 
       | LTANGLE  of Paths.region
       | RTANGLE  of Paths.region
       | DBL_LTANGLE  of Paths.region
       | DBL_RTANGLE  of Paths.region
       | LTPAREN of Paths.region
       | RTPAREN  of Paths.region 
       | LTBRACKET   of Paths.region
       | RTBRACKET  of Paths.region 
       | LTBRACE   of Paths.region
       | RTBRACE  of Paths.region
       | COLON of Paths.region
       | AT of Paths.region
       | SIG of Paths.region
       | USE of string
       | EOF 

       | ABBREV of Paths.region
       | INFIX of Paths.region
       | POSTFIX of Paths.region
       | PREFIX of Paths.region
       | NAME of Paths.region
       | RIGHT of Paths.region
       | LEFT of Paths.region
       | DIGITS of Paths.region * int


%nonterm    start of D.DelphinProgram
	    | idopt of Paths.region * (string option)
	    | delphinprogram of D.DelphinProgram
	    | varList of D.LFExpWorld list
	    | lfexpWorld of D.LFExpWorld
            | topdec of D.TopDec
	    | constant of D.TopDec
	    | constants of D.DelphinProgram
	    | lfdec of D.LFDec
	    | lfdecNoOmit of D.LFDec
	    | lfnormalDec of D.NormalDec
	    | metaNormalDec of D.NormalDec
	    | normaldec of D.NormalDec (* Where type can be omitted *)
	    | newdec of D.NewDec (* Where type can be omitted *)
	    | lfexp of D.LFExp
  	    | lfexpPat of D.LFExp
	    | lfexpNoOf of D.LFExp
	    | metaPattern of D.PatternExp
	    | metaPatternsAnd of D.PatternExp list
	    | metaPatternsS of D.PatternExp list
	    | metaterm of D.Exp
	    | metaterms of D.Exp list (* for application *)
	    | letlist of D.Exp
	    | LFfunctiondec of (Paths.region * D.Visibility * D.NormalDec)
	    | functiondecsAnd of (Paths.region * D.Visibility * D.NormalDec) list
	    | functiondecs of (Paths.region * D.Visibility * D.NormalDec) list
	    | functiondec of (Paths.region * D.Visibility * D.NormalDec)
	    | formula of D.Formula
	    | precOption of D.Prec option
	    | optSemis of unit
	    | mutualdef of (Paths.region * D.NormalDec * D.Exp) list
	    | kind of D.Kind
	    | metatermListS of (Paths.region * D.Exp) list	
	    | nonEmpCaseList of (D.CaseBranch list)
	    | metacase of D.CaseBranch
	    | metacaseTwo of D.CaseBranch
	    | nameOption of D.Name option
	    | popID of Paths.region * string



(* Set precedences *)

(* (e1,e2) => **** , here the => has lowest precedence *)
%right EQARROW 

(* We set RTBRACKET and RTBRACE to handle the following: 
 * [x] B : C = [x] (B : C) 
 * {x} A -> B = {x} (A -> B) 
 *)
%nonassoc RTBRACKET RTBRACE

(* LET _ EQUAL _ IN M1 M2 = LET _ EQUAL _ IN (M1 M2) *)
(* %nonassoc IN -- don't need this *)

(* CASE ... OF ... *)
(* %nonassoc OF *)

(* association of BAR is only needed for list of cases *)
%right BAR


%nonassoc COLON

%right RTARROW
%left LTARROW

%right WITH
%right COMMA STAR AND


(* %nonassoc POP POUND *)
%nonassoc POP

(*
 * Finally, we need to specify that Application
 * is left associative.
 * in addition, since it is just specified by juxtaposition
 * we need to handle the nonterminals that it may see.
 *)

%nonassoc ID DIGITS RIGHT LEFT LTANGLE LTBRACKET  LTPAREN FN CASE LET UNDERSCORE LTBRACE (* LTBRACE is for new *)
%left AT BACKSLASH (* AT is lifted application *) (* BACKSLASH is another way to write pop *)


%nonassoc POUND

%start start

%%

start		: optSemis delphinprogram
			(delphinprogram)


delphinprogram	: 
			(nil)
		| SIG constants optSemis delphinprogram
			(constants @ delphinprogram)
		| TYPE ID EQUAL formula optSemis delphinprogram
			( (D.TypeDef (join(TYPE, D.getRegFormula formula), deReg ID, formula))::delphinprogram)
		| PARAMS EQUAL STAR SEMICOLON optSemis delphinprogram
			( (D.WorldDec (D.Anything)) :: delphinprogram)
		| PARAMS EQUAL varList SEMICOLON optSemis delphinprogram
			( (D.WorldDec (D.Variables varList)) :: delphinprogram)
		| topdec delphinprogram
			(topdec::delphinprogram)



varList		: DOT
			(nil)
		| lfexpWorld
			([lfexpWorld])
		| lfexpWorld COMMA varList
			(lfexpWorld :: varList)

lfexpWorld	: LTANGLE lfexpPat RTANGLE
			(D.WorldType lfexpPat)
		| LTBRACKET LTANGLE lfnormalDec RTANGLE RTBRACKET lfexpWorld
			(D.WorldEps(join(LTBRACKET, D.getRegLFExpWorld lfexpWorld), lfnormalDec, lfexpWorld))

optSemis	:
			()
		| SEMICOLON optSemis
			()

mutualdef	: 
			(nil)
		| AND metaNormalDec EQUAL metaterm mutualdef
			(let
	 		 val region = join(AND, 
					D.getRegExp(metaterm))
			 in
			  ((region, metaNormalDec, metaterm)::mutualdef)
			 end)


constant	: USE
			(D.LFUse USE)

		| LTANGLE ID COLON kind RTANGLE nameOption precOption
			(D.LFTypeConstant(join(getReg ID,D.getRegKind kind),deReg ID, kind, nameOption, precOption))


		| LTANGLE ID COLON lfexp RTANGLE precOption 
			(
				let 
				   val r = join(getReg ID, D.getRegLFExp lfexp)
				in
				   D.LFObjectConstant(r,D.LFDec(r,SOME(deReg ID), lfexp), precOption)
				end
			)

		| LTANGLE lfdecNoOmit EQUAL lfexp RTANGLE ABBREV precOption
		       ( D.LFDef (join(D.getRegLFDec lfdecNoOmit, D.getRegLFExp lfexp),
					lfdecNoOmit,
					lfexp, true, precOption))

		| LTANGLE lfdecNoOmit EQUAL lfexp RTANGLE precOption
		       ( D.LFDef (join(D.getRegLFDec lfdecNoOmit, D.getRegLFExp lfexp),
					lfdecNoOmit,
					lfexp, false, precOption))

constants	: constant SEMICOLON
			([constant])
		| constant constants
			(constant :: constants)




topdec		: FUN metaNormalDec EQUAL metaterm mutualdef SEMICOLON optSemis
			(let
	 		 val region = join(FUN, 
					D.getRegExp(metaterm))
			 in
			  D.MetaFix ((region, metaNormalDec, metaterm)::mutualdef)
			 end)

		| metaterm SEMICOLON optSemis
			(let
	 		 val region = D.getRegExp(metaterm)
			 in
			  D.MetaVal(region, NONE, metaterm)
			 end)


		| VAL ID EQUAL metaterm SEMICOLON optSemis
			(let
	 		 val region = join(VAL, D.getRegExp(metaterm))
			 in
			  D.MetaVal(region, SOME (deReg ID), metaterm)
			 end)

		| VAL ID COLON formula EQUAL metaterm SEMICOLON optSemis
			(let
	 		 val region = join(VAL, D.getRegExp(metaterm))
	  		 val T = D.Meta (D.getRegFormula(formula), formula)
			 in
			  D.MetaVal(region, SOME (deReg ID), 
				   D.TypeAscribe(region,
						metaterm,
                                                T))
			 end)


		| USE SEMICOLON optSemis
			(D.Use (USE))
			

kind		: TYPE
			(D.Type TYPE)
		| LTBRACE lfdec RTBRACE kind
			(D.PiKind(
			 join(LTBRACE,D.getRegKind(kind)), 
			 lfdec, 
			 kind))
		| lfexp RTARROW kind
			(let
                           val r1 = D.getRegLFExp(lfexp)
			 in
				 D.PiKind(
				 join(r1,D.getRegKind(kind)), 
				 D.LFDec(r1, NONE, lfexp), 
				 kind)
			 end)
		| LTPAREN kind RTPAREN
			(kind) (* We do not need to save paren information here.. as it doesn't matter *)

nameOption	: 
			(NONE)
		| NAME ID
			(SOME (D.OneName(join(NAME, getReg ID), deReg ID)))

		| NAME ID ID
			(SOME (D.TwoNames(join(NAME, getReg ID2), deReg ID1, deReg ID2)))


precOption	: 
			(NONE)
		| INFIX LEFT DIGITS
			(SOME (D.INFIXL(join(INFIX, getReg DIGITS),deReg DIGITS)))
		| INFIX RIGHT DIGITS
			(SOME (D.INFIXR(join(INFIX, getReg DIGITS),deReg DIGITS)))
		| INFIX DIGITS
			(SOME (D.INFIXN(join(INFIX, getReg DIGITS),deReg DIGITS)))
		| POSTFIX DIGITS
			(SOME (D.POSTFIX(getReg DIGITS, deReg DIGITS)))
		| PREFIX DIGITS
			(SOME (D.PREFIX(getReg DIGITS, deReg DIGITS)))


lfexp		: ID
			(D.LFid (getReg ID, false, deReg ID))

		| lfexp lfexp
			%prec AT (* AT is an application *)
			(D.LFapp 
 			(join(D.getRegLFExp(lfexp1), D.getRegLFExp(lfexp2)),
			 lfexp1,lfexp2))

		| LTBRACE lfdec RTBRACE lfexp
			(D.LFpi(
			 join(LTBRACE,D.getRegLFExp(lfexp)), 
			 lfdec, 
			 lfexp))

		| lfexp RTARROW lfexp
			(D.LFrtArrow 
			(join(D.getRegLFExp(lfexp1), D.getRegLFExp(lfexp2)),
			 lfexp1, lfexp2))
		| lfexp LTARROW lfexp
			(D.LFltArrow 
			(join(D.getRegLFExp(lfexp1), D.getRegLFExp(lfexp2)),
			 lfexp1, lfexp2))


		| LTBRACKET lfdec RTBRACKET lfexp
			(D.LFfn (join(LTBRACKET, D.getRegLFExp(lfexp)), lfdec, lfexp))
	        | lfexp COLON lfexp
			(D.LFof
			(join(D.getRegLFExp(lfexp1), D.getRegLFExp(lfexp2)),
			lfexp1,
			lfexp2))

	        | lfexp COLON LTANGLE lfexp RTANGLE
			(* This rule isn't necessary, but it doesn't hurt *)
			(D.LFof
			(join(D.getRegLFExp(lfexp1), D.getRegLFExp(lfexp2)),
			lfexp1,
			lfexp2))
		| UNDERSCORE
			(D.LFomit (UNDERSCORE))
		| LTPAREN lfexp RTPAREN
			(D.LFparen (join(LTPAREN,RTPAREN), lfexp))


lfexpNoOf	: ID
			(D.LFid (getReg ID, false, deReg ID))

		| lfexpNoOf lfexp
			%prec AT (* AT is an application *)
			(D.LFapp 
 			(join(D.getRegLFExp(lfexpNoOf), D.getRegLFExp(lfexp)),
			 lfexpNoOf,lfexp))


		| LTBRACE lfdec RTBRACE lfexpNoOf
			(D.LFpi(
			 join(LTBRACE,D.getRegLFExp(lfexpNoOf)), 
			 lfdec, 
			 lfexpNoOf))

		| lfexpNoOf RTARROW lfexpNoOf
			(D.LFrtArrow 
			(join(D.getRegLFExp(lfexpNoOf1), D.getRegLFExp(lfexpNoOf2)),
			 lfexpNoOf1, lfexpNoOf2))
		| lfexpNoOf LTARROW lfexpNoOf
			(D.LFltArrow 
			(join(D.getRegLFExp(lfexpNoOf1), D.getRegLFExp(lfexpNoOf2)),
			 lfexpNoOf1, lfexpNoOf2))


		| LTBRACKET lfdec RTBRACKET lfexpNoOf
			(D.LFfn (join(LTBRACKET, D.getRegLFExp(lfexpNoOf)), lfdec, lfexpNoOf))


		| UNDERSCORE
			(D.LFomit (UNDERSCORE))


		| LTPAREN lfexp RTPAREN
			(D.LFparen (join(LTPAREN,RTPAREN), lfexp))


lfexpPat	: ID
			(D.LFid (getReg ID, false, deReg ID))

		| ID POUND
			(D.LFid (getReg ID, true, deReg ID))

		| lfexpPat lfexpPat
			%prec AT (* AT is an application *)
			(D.LFapp 
 			(join(D.getRegLFExp(lfexpPat1), D.getRegLFExp(lfexpPat2)),
			 lfexpPat1,lfexpPat2))

		| LTBRACE lfdec RTBRACE lfexpPat
			(D.LFpi(
			 join(LTBRACE,D.getRegLFExp(lfexpPat)), 
			 lfdec, 
			 lfexpPat))

		| lfexpPat RTARROW lfexpPat
			(D.LFrtArrow 
			(join(D.getRegLFExp(lfexpPat1), D.getRegLFExp(lfexpPat2)),
			 lfexpPat1, lfexpPat2))
		| lfexpPat LTARROW lfexpPat
			(D.LFltArrow 
			(join(D.getRegLFExp(lfexpPat1), D.getRegLFExp(lfexpPat2)),
			 lfexpPat1, lfexpPat2))


		| LTBRACKET lfdec RTBRACKET lfexpPat
			(D.LFfn (join(LTBRACKET, D.getRegLFExp(lfexpPat)), lfdec, lfexpPat))

	        | lfexpPat COLON lfexpPat
			(
			   let
				fun switchPound (D.LFid(r1, _, s1), D.LFid(r2, true, s2)) = (D.LFid (r1, true, s1), D.LFid (r2, false, s2))
				  | switchPound (exp1, exp2) = (exp1, exp2)
				val (exp1, exp2) = switchPound (lfexpPat1, lfexpPat2)
			   in

				D.LFof
				(join(D.getRegLFExp(exp1), D.getRegLFExp(exp2)),
				exp1,
				exp2)
			   end)

		| lfexpPat COLON lfexpPat POUND
			(
                           let
			        fun makeParam (D.LFid(r,_,s)) = D.LFid(r, true, s)
			          | makeParam E = E

                                val r = join(D.getRegLFExp(lfexpPat1), POUND)

				val E = makeParam lfexpPat1
			   in
				D.LFof (r, E, lfexpPat2)
			   end
                        )


	        | lfexpPat COLON LTANGLE lfexpPat RTANGLE
			(* This rule isn't necessary, but it doesn't hurt *)
			(D.LFof
			(join(D.getRegLFExp(lfexpPat1), D.getRegLFExp(lfexpPat2)),
			lfexpPat1,
			lfexpPat2))
		| UNDERSCORE
			(D.LFomit (UNDERSCORE))
		| LTPAREN lfexpPat RTPAREN
			(D.LFparen (join(LTPAREN,RTPAREN), lfexpPat))




idopt		: ID
			(getReg ID, SOME (deReg ID))
		| UNDERSCORE
			(UNDERSCORE, NONE)

lfdec		: idopt COLON lfexpNoOf
			(D.LFDec (join(getReg idopt, D.getRegLFExp(lfexpNoOf)), deReg idopt, lfexpNoOf))
		| idopt
			(D.LFDec (getReg idopt, deReg idopt, D.LFomit(getReg idopt)))

lfdecNoOmit	: ID COLON lfexp
			(D.LFDec (join(getReg ID, D.getRegLFExp(lfexp)), SOME (deReg ID), lfexp))
		| ID
			(D.LFDec (getReg ID, SOME(deReg ID), D.LFomit(getReg ID)))


LFfunctiondec	: DBL_LTANGLE ID COLON lfexp DBL_RTANGLE
			(join(DBL_LTANGLE, DBL_RTANGLE), 
	                 D.Implicit, 
                         D.NormalDec(join(DBL_LTANGLE,DBL_RTANGLE),SOME(deReg ID),D.LF(D.getRegLFExp(lfexp), D.Existential, lfexp)))
		| DBL_LTANGLE ID DBL_RTANGLE
			 ( let
				val r = getReg ID
			   in
 			     (join(DBL_LTANGLE, DBL_RTANGLE), 
                              D.Implicit,
			      D.NormalDec(join(DBL_LTANGLE,DBL_RTANGLE),SOME(deReg ID),D.LF(r,D.Existential, D.LFomit r)))
			   end)
              (* SHOULD WE ALLOW IMPLICIT PARAMS??  right now.. no 
		| DBL_LTANGLE ID COLON lfexp POUND DBL_RTANGLE
			(join(DBL_LTANGLE, DBL_RTANGLE), 
                         D.Implicit, 
                         D.NormalDec(join(DBL_LTANGLE,DBL_RTANGLE),SOME(deReg ID),D.LF(D.getRegLFExp(lfexp),D.Param, lfexp)))
              *)
		| LTANGLE ID COLON lfexp RTANGLE
			(join(LTANGLE, RTANGLE),
			 D.Visible,
  			 D.NormalDec(join(LTANGLE,RTANGLE),SOME(deReg ID),D.LF(D.getRegLFExp(lfexp),D.Existential, lfexp)))

		| LTANGLE ID COLON lfexp POUND RTANGLE
			(join(LTANGLE, RTANGLE),
			 D.Visible,
  			 D.NormalDec(join(LTANGLE,RTANGLE),SOME(deReg ID),D.LF(join(D.getRegLFExp(lfexp), POUND),D.Param, lfexp)))

		| LTPAREN LFfunctiondec RTPAREN
			(LFfunctiondec)


functiondec	:  LFfunctiondec 
			(LFfunctiondec)
		| formula 
			(
			  let val r = D.getRegFormula(formula)
			  in
			    (r, D.Visible, D.NormalDec(r, NONE, D.Meta(r,formula)))
			  end
                        )




functiondecsAnd	: functiondec
			([functiondec])
		| functiondecs
			(functiondecs)

functiondecs	: functiondec AND functiondecsAnd
			(functiondec :: functiondecsAnd)

		| LTPAREN functiondecs RTPAREN
			(functiondecs)





formula		: UNIT
			(D.Top (UNIT))
		| LTPAREN functiondecs RTPAREN RTARROW formula
			 (
			   let
			      fun getRegion [(r, visible, D)] = r
				| getRegion ((r, visible, D)::xs) = join(r, getRegion xs)
				| getRegion _ = raise Domain

			      fun eraseRegion (r, visible, D) = (visible, D)

			      val r = getRegion (functiondecs)
			   in
			      D.All(join(r, D.getRegFormula(formula)), map eraseRegion (functiondecs), formula)
			   end
			 )

		| LFfunctiondec RTARROW formula
			(let val (r, visible, D) = LFfunctiondec
			 in
			    D.All(join(r, D.getRegFormula(formula)), [(visible, D)], formula)
			 end)

		| formula RTARROW formula
			(let val r = D.getRegFormula formula1
			     val visible = D.Visible
			     val D = D.NormalDec(r, NONE, D.Meta(r, formula))
			 in
			    D.All(join(r, D.getRegFormula(formula2)), [(visible, D)], formula2)
			 end)



		| LTANGLE ID COLON lfexp RTANGLE STAR formula
			 (D.Exists(
			   join(LTANGLE, D.getRegFormula(formula)),
			   D.NormalDec(join(LTANGLE,RTANGLE),SOME(deReg ID),D.LF(D.getRegLFExp(lfexp),D.Existential, lfexp)),
			  formula))

		| LTANGLE ID COLON lfexp POUND RTANGLE STAR formula
			 (D.Exists(
			   join(LTANGLE, D.getRegFormula(formula)),
			   D.NormalDec(join(LTANGLE,RTANGLE),SOME(deReg ID),D.LF(join(D.getRegLFExp(lfexp), POUND),D.Param, lfexp)),
			  formula))


		| formula STAR formula
			 (let val r1 = D.getRegFormula(formula1)
			      val r2 = join(r1, D.getRegFormula(formula2))
			  in
			    D.Exists(r2,
			      D.NormalDec(r1,NONE,D.Meta(r1, formula1)),
			      formula2)
			  end)


		| LTBRACE newdec RTBRACE formula
			 (D.Nabla(
			   join(LTBRACE, D.getRegFormula(formula)),
			   newdec,
			  formula))

		| ID
			(D.FormulaString ID)

		| UNDERSCORE
			(D.OmittedFormula (UNDERSCORE))

		| LTANGLE lfexpNoOf RTANGLE
			(* This stands for a pair (<A> * top) *)
			(
                         let 
				val r = join(LTANGLE, RTANGLE)
			 in
				D.Exists(r, D.NormalDec(r, NONE, D.LF(r, D.Existential, lfexpNoOf)), D.Top r)
			 end
			)

		| LTANGLE lfexpNoOf POUND RTANGLE
			(* This stands for a pair (<A#> * top) *)
			(
                         let 
				val r = join(LTANGLE, RTANGLE)
			 in
				D.Exists(r, D.NormalDec(r, NONE, D.LF(r, D.Param, lfexpNoOf)), D.Top r)
			 end
			) 

		| LTPAREN formula RTPAREN
			(formula)





lfnormalDec	: ID COLON lfexp
			(D.NormalDec(join(getReg ID, D.getRegLFExp(lfexp)), SOME(deReg ID),
				    D.LF(D.getRegLFExp(lfexp), D.Existential, lfexp)))
		| ID COLON lfexp POUND
			( let val r = D.getRegLFExp(lfexp)
		          in
			    D.NormalDec(join(getReg ID, POUND), SOME(deReg ID),
				    D.LF(join(r,POUND), D.Param, lfexp))
			  end)
		| ID
			(let val r = getReg ID
			 in
                           D.NormalDec(r, SOME(deReg ID),
				     D.LF(r, D.OmittedParam, D.LFomit r))
			end)

		| ID POUND
			(let val r = join(getReg ID, POUND)
			 in
                           D.NormalDec(r, SOME(deReg ID),
				     D.LF(r, D.Param, D.LFomit r))
			end)

metaNormalDec	: ID COLON formula
			(let val r1 = getReg ID
			     val r2 = D.getRegFormula formula
			     val r3 = join(r1,r2)
			 in 
			    (D.NormalDec(r3, SOME(deReg ID), 
					    D.Meta(r2, formula)))
			 end)

		| ID 
			(let val r = getReg ID
			 in 
			    (D.NormalDec(r, SOME(deReg ID), 
					    D.Meta(r, D.OmittedFormula r)))
			 end)

(* This refers to declarations where we can omit the type, but we must have the identifier *)
normaldec	: LTANGLE lfnormalDec RTANGLE
			(lfnormalDec)
		| metaNormalDec
			(metaNormalDec)

		| LTPAREN normaldec RTPAREN
			(normaldec)


newdec		: LTANGLE ID COLON lfexp POUND RTANGLE
		  	(D.NewDecLF(join(LTANGLE, RTANGLE), SOME(deReg ID), lfexp))
		| LTANGLE ID COLON lfexp RTANGLE (* we forgive if the user forgot to end it with pound *)
		  	(D.NewDecLF(join(LTANGLE, RTANGLE), SOME(deReg ID), lfexp))

		| LTANGLE ID RTANGLE
			(let val r = getReg ID 
			 in
			   D.NewDecLF(r, SOME(deReg ID), D.LFomit(r))
			 end)

		| LTANGLE ID POUND RTANGLE
			(let val r = getReg ID 
			 in
			   D.NewDecLF(r, SOME(deReg ID), D.LFomit(r))
			 end)

    (* ABP:  Disabled meta-level parameters for now....  Are they needed?
     * If we put it back then we need to also add "formula POUND" to functions
     * and type ascription.. search for .Meta(_, Existential) and use Meta(_, Param)
	
		| ID COLON formula POUND
			(D.NewDecMeta (join(getReg ID, POUND), SOME(deReg ID), formula))

		| ID COLON formula (* It MUST end with POUND, but if the user forgot.. we will forgive them *)
			(D.NewDecMeta (join(getReg ID, D.getRegFormula(formula)), SOME(deReg ID), formula))

		| ID
			(let val r = getReg ID
			 in 
	  		    D.NewDecMeta (r, SOME(deReg ID), D.OmittedFormula r)
			 end)

		| ID POUND
			(let val r = getReg ID
			 in 
	  		    D.NewDecMeta (r, SOME(deReg ID), D.OmittedFormula r)
			 end)
      *)


metaPatternsAnd	: metaPattern 
			([metaPattern])
		| metaPattern AND metaPatternsAnd
			(metaPattern :: metaPatternsAnd)
		| LTPAREN metaPattern AND metaPatternsAnd RTPAREN
			(metaPattern :: metaPatternsAnd)


(* metaPatternsS represents syntactic sugar,
   i.e. fn A B C => E  ====   fn x1 => fn x2 => fn x3 => case (x1 and x2 and x3) 
                                                        of (A and B and C) => E 
*)
metaPatternsS	: metaPattern
			([metaPattern])
		| metaPattern metaPatternsS
			(metaPattern :: metaPatternsS)

metaPattern	: ID
			(D.PatternString (getReg ID,deReg ID))
		| UNDERSCORE
			(D.PatternOmitted UNDERSCORE)
		| LTANGLE lfexpPat RTANGLE
			(D.PatternQuote (join(LTANGLE,RTANGLE), lfexpPat))
		| metaPattern COLON formula
			(let
			  val T = D.Meta (D.getRegFormula(formula), formula)
			 in
			   D.PatternAscribe(
			   join(D.getRegPatternExp(metaPattern), D.getRegTypes T),
			   metaPattern,
			   T)
			 end)

		| LTPAREN RTPAREN
			(D.PatternUnit(join(LTPAREN,RTPAREN)))

		| metaPattern COMMA metaPattern
			(D.PatternPair(
			 join(D.getRegPatternExp(metaPattern1), D.getRegPatternExp(metaPattern2)),
			 metaPattern1, 
			 metaPattern2))

		| LTBRACE newdec RTBRACE metaPattern
			(D.PatternNew(join(LTBRACE, D.getRegPatternExp(metaPattern)), 
			      newdec, metaPattern))

		| metaPattern BACKSLASH popID
			(D.PatternPop(join(D.getRegPatternExp(metaPattern), getReg popID), deReg popID, metaPattern))

		| POP popID metaPattern
			(D.PatternPop(join(POP,D.getRegPatternExp(metaPattern)), deReg popID, metaPattern))


		| LTPAREN metaPattern RTPAREN
			(metaPattern)

metaterms	: metaterm
			([metaterm])
		| metaterm AND metaterms
			(metaterm::metaterms)
		| LTPAREN metaterm AND metaterms RTPAREN
			(metaterm::metaterms)


metaterm	: ID
			(D.VarString (getReg ID,deReg ID))

		| LTANGLE lfexp RTANGLE
			(D.Quote (join(LTANGLE,RTANGLE), lfexp))

		| LTPAREN RTPAREN
			(D.Unit(join(LTPAREN,RTPAREN)))


		| LTBRACE newdec RTBRACE metaterm
			(D.New(join(LTBRACE, D.getRegExp metaterm), newdec, metaterm))

		| metaterm metaterm
			%prec AT (* AT is an application *)
			(D.App(join(D.getRegExp(metaterm1), D.getRegExp(metaterm2)),
			       metaterm1,
			       [metaterm2]))

		| metaterm LTPAREN metaterm AND metaterms RTPAREN
			%prec AT (* AT is an application *)
			(
			  let
			   fun getRegion [E] = D.getRegExp E
			     | getRegion (E::ms) = join(D.getRegExp E, getRegion ms)
	                     | getRegion [] = raise Domain
			  in			
				D.App(
				 join(D.getRegExp(metaterm1), getRegion(metaterms)),
				 metaterm1, 
				 metaterm2::metaterms)
			 end
			 )


		| metaterm COMMA metaterm
			(D.Pair(
			 join(D.getRegExp(metaterm1), D.getRegExp(metaterm2)),
			 metaterm1, 
			 metaterm2))

		| metaterm BACKSLASH popID
			(D.Pop(join(D.getRegExp(metaterm), getReg popID), deReg popID, metaterm))

		| POP popID metaterm
			(D.Pop(join(POP,D.getRegExp(metaterm)), deReg popID, metaterm))

		| FN DOT
			(D.Lam (join(FN, DOT), []))

		| FN nonEmpCaseList
			( 
			   let fun getRegC [C] = D.getRegCaseBranch C
				| getRegC (C::cs) = join(D.getRegCaseBranch C, getRegC cs)
				| getRegC _ = raise Domain 
			
                               val r = join(FN, getRegC nonEmpCaseList)
			  in
			    D.Lam (r, nonEmpCaseList)
			 end)


		
		| metaterm COLON formula
			(let
	                   val T = D.Meta (D.getRegFormula(formula), formula)
			 in
		           D.TypeAscribe(
			   join(D.getRegExp(metaterm), D.getRegTypes T),
			   metaterm,
			   T)
			 end)



		| metaterm AT metaterm
			(D.LiftedApp(
			 join(D.getRegExp(metaterm1), D.getRegExp(metaterm2)),
			 metaterm1, 
			 metaterm2))

		| LET VAL metaPattern EQUAL metaterm letlist END
			(D.LetVar (join(LET, END), metaPattern, metaterm, letlist))


		| LET FUN metaNormalDec EQUAL metaterm mutualdef letlist END
			(D.LetFun (join(LET, END),
				   (join(FUN, D.getRegExp metaterm),metaNormalDec, metaterm)::mutualdef,
				   letlist))

		| LTPAREN metaterm RTPAREN
			(metaterm)


		| LTPAREN metaterm SEMICOLON metatermListS RTPAREN
			(D.Sequence ((D.getRegExp metaterm, metaterm) :: metatermListS))


		| CASE metaterms OF DOT
			(D.App(join(CASE,DOT), D.Lam(DOT, []), metaterms))

		| CASE metaterms OF nonEmpCaseList
			( 
			   let fun getRegC [C] = D.getRegCaseBranch C
				| getRegC (C::cs) = join(D.getRegCaseBranch C, getRegC cs)
				| getRegC _ = raise Domain 
			
                               val r = getRegC nonEmpCaseList
			  in
			    D.App(join(CASE,r),
				  D.Lam (r, nonEmpCaseList),
				  metaterms)
			 end)


		| metaterm WITH DOT
			(D.ExtendFun (join(D.getRegExp metaterm, DOT), metaterm, nil))


		| metaterm WITH nonEmpCaseList
			(  let fun getRegC [C] = D.getRegCaseBranch C
				| getRegC (C::cs) = join(D.getRegCaseBranch C, getRegC cs)
				| getRegC _ = raise Domain 
			
                               val r = join(D.getRegExp metaterm, getRegC nonEmpCaseList)
			    in
				D.ExtendFun (r, metaterm, nonEmpCaseList)
			    end)



letlist		: IN metaterm
			(metaterm)

		| VAL metaPattern EQUAL metaterm letlist
			(D.LetVar (join(VAL, D.getRegExp(letlist)), metaPattern, metaterm, letlist))


		| FUN metaNormalDec EQUAL metaterm mutualdef letlist
			(D.LetFun (join(FUN, D.getRegExp(letlist)),
				   (join(FUN, D.getRegExp metaterm),metaNormalDec, metaterm)::mutualdef,
				   letlist))

metatermListS	: metaterm 
			([(D.getRegExp metaterm, metaterm)])
		| metaterm SEMICOLON metatermListS
			((D.getRegExp metaterm, metaterm)::metatermListS)


nonEmpCaseList	: metacase
			%prec BAR
			(* Need to specify %prec for this rule
			 * and that BAR is right associative above
			 * so that it shifts whenever it sees BAR.
			 *)
			([metacase])
		| metacase BAR nonEmpCaseList
			(metacase :: nonEmpCaseList)


metacase	: LTBRACKET normaldec RTBRACKET metacase
			(D.Eps(join(LTBRACKET, D.getRegCaseBranch metacase), normaldec, metacase))
		| LTBRACE newdec RTBRACE metacaseTwo
			(D.NewC(join(LTBRACE, D.getRegCaseBranch metacaseTwo), newdec, metacaseTwo))
		| metacase BACKSLASH popID
			(D.PopC(join(D.getRegCaseBranch(metacase), getReg popID), deReg popID, metacase))
		| POP popID metacaseTwo
			(D.PopC(join(POP,D.getRegCaseBranch(metacaseTwo)), deReg popID, metacaseTwo))
		| metaPatternsAnd EQARROW metaterm
                      (* if it only has one pattern fn X => ... we
		       * mark it as sugar so if user explicitly specifies
                       * completely implicit function, it will attach
 		       * the implicit arguments to this list of patterns.. 
		       * for example, if user writes fun foo : <<x:A>> -> <bar x> -> T = fn <M>
		       * then this may come up.  This would not come up if user correctly made it
		       * (<<x:A>> and <bar x>) -> T = fn <M>
		       *)
			(
			 let
			   fun getRegion [metaPattern] = D.getRegPatternExp metaPattern
			     | getRegion (metaPattern::ms) = join(D.getRegPatternExp metaPattern, getRegion ms)
	                     | getRegion [] = raise Domain

			   val isSugar = ((List.length metaPatternsAnd) <= 1)
		         in 
			    D.Match(isSugar, join(getRegion metaPatternsAnd, D.getRegExp metaterm), metaPatternsAnd, metaterm)
                         end
                        )

		| metaPattern metaPatternsS EQARROW metaterm
			(
			 let
			   fun getRegion [metaPattern] = D.getRegPatternExp metaPattern
			     | getRegion (metaPattern::ms) = join(D.getRegPatternExp metaPattern, getRegion ms)
	                     | getRegion [] = raise Domain
		         in
			    D.Match(true, join(getRegion (metaPattern::metaPatternsS), D.getRegExp metaterm), (metaPattern::metaPatternsS), metaterm)
                         end
                        )


		| LTPAREN metacase RTPAREN
			(metacase)

(* metacaseTwo is used when we are parsing a metacase under a NewC or PopC
 * the only difference from metacase is that it will require parenthesis
 * for example {<x>} {<y>} (e => f) .. here the parenthesis is necessary
 * to avoid an ambiguity with ({<x>}{<y>}e) => f
 *)
metacaseTwo	: LTBRACKET normaldec RTBRACKET metacaseTwo
			(D.Eps(join(LTBRACKET, D.getRegCaseBranch metacaseTwo), normaldec, metacaseTwo))
		| LTBRACE newdec RTBRACE metacaseTwo
			(D.NewC(join(LTBRACE, D.getRegCaseBranch metacaseTwo), newdec, metacaseTwo))
		| metacaseTwo BACKSLASH popID
			(D.PopC(join(D.getRegCaseBranch(metacaseTwo), getReg popID), deReg popID, metacaseTwo))
		| POP popID metacaseTwo
			(D.PopC(join(POP,D.getRegCaseBranch(metacaseTwo)), deReg popID, metacaseTwo))
	     (* OLD
		| LTPAREN metaPatternsAnd EQARROW metaterm RTPAREN
			(...)

		| LTPAREN metacaseTwo RTPAREN
			(metacaseTwo)

              END OLD *)
		| LTPAREN metacase RTPAREN
			(metacase)


		|  metaPattern metaPatternsS EQARROW metaterm
			(
			 let
			   fun getRegion [metaPattern] = D.getRegPatternExp metaPattern
			     | getRegion (metaPattern::ms) = join(D.getRegPatternExp metaPattern, getRegion ms)
	                     | getRegion [] = raise Domain
		         in
			    D.Match(true, join(getRegion (metaPattern::metaPatternsS), D.getRegExp metaterm), (metaPattern::metaPatternsS), metaterm)
                         end
                        )

(* this is useful so it parses "pop x pop u E Y" as "pop x pop u (E Y)"
 * otherwise it can be parsed as "pop x pop (u E) Y"
 * ABP:  Additionally, we now allow you to specify an ID as <ID> as well... 
 *)
popID		: ID
			(ID)
		| LTANGLE ID RTANGLE
			(ID)  (* WARNING:  Perhaps some ambiguity if using meta-level parameters!! *)