% Test for copy theorem
% Author: Carsten Schuermann

exp : type.

app : exp -> exp -> exp.
lam : (exp -> exp) -> exp.
callcc : ((exp -> exp) -> exp) -> exp.
reset  : (((exp -> exp) -> exp) -> exp) -> exp.

%block e0 : block {x:exp}.
%block e1 : block {c:exp -> exp}.
%block e2 : block {c:(exp -> exp) -> exp}.
%worlds (e0 | e1 | e2) (exp).


exp' : type.
app' : exp' -> exp' -> exp'.
lam' : (exp' -> exp') -> exp'.
callcc' : ((exp' -> exp') -> exp') -> exp'.
reset'  : (((exp' -> exp') -> exp') -> exp') -> exp'.

%block f0 : block {y:exp'}.
%block f1 : block {d:exp' -> exp'}.
%block f2 : block {d:(exp' -> exp') -> exp'}.
%worlds (f0 | f1 | f2) (exp').

cp : exp -> exp' -> type.
%mode cp +E -E'.

cp_app : cp (app D1 D2) (app' E1 E2)
          <- cp D1 E1
          <- cp D2 E2.

cp_lam : cp (lam ([x:exp] D x)) (lam' ([y:exp'] E y))
          <- ({x:exp} {y:exp'} cp x y -> cp (D x) (E y)).

cp_callcc: ({c:exp -> exp} {d:exp' -> exp'}
              ({x:exp} {y:exp'} cp x y -> cp (c x) (d y))
              -> cp (E c) (F d))
              -> cp (callcc [c:exp -> exp] E c) (callcc' [d:exp' -> exp'] F d).

cp_reset: ({c: (exp -> exp) -> exp} {d: (exp' -> exp') -> exp'}
             ({f: exp -> exp} {g: exp' -> exp'}
               ({x: exp} {y:exp'} cp x y -> cp (f x) (g y))
               -> cp (c f) (d g))
             -> cp (E c) (F d))
           -> cp (reset [c: (exp -> exp) -> exp] E c)
                 (reset' [d: (exp' -> exp') -> exp'] F d).


%block l1 : block {x:exp} {y:exp'} {u:cp x y}.

%block l2 : block {c:exp -> exp} {d:exp' -> exp'}
              {u:{x:exp} {y:exp'} cp x y -> cp (c x) (d y)}.

%block l3 : block {c: (exp -> exp) -> exp} {d: (exp' -> exp') -> exp'}
             {u:{f: exp -> exp} {g: exp' -> exp'}
               ({x: exp} {y:exp'} cp x y -> cp (f x) (g y))
                 -> cp (c f) (d g)}.


%worlds (l1 | l2 | l3) (cp _ _).
%covers cp +C -F.
%total {C} (cp C _).